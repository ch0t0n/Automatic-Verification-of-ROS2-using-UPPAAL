<?xml version='1.0' encoding='utf-8'?>
<nta>
  <declaration>
chan p3, p1, p2, s2, s1;
const int r1 = 2, r2 = 3;
const int ds1 = 1, ds2 = 4;
const int ns1 = 5, ns2 = 3;
int As2[5], As1[5];
int cs2 = 0, os2 = 0, cs1 = 0, os1 = 0;

void enqueue(int &amp;A[5], int n, int &amp;cs, int &amp;os, int p) {
    if (cs == n){
        int i;        
        for (i=0; i&lt;=n-2; i++){
            A[i] = A[i+1];
        }
        A[n-1] = p;
        os = 1-os;
    }
    else {
        A[cs] = p;
        cs++;
    }
}

void dequeue(int &amp;A[5], int n, int &amp;cs) {    
    int i;
    if (cs == 1){
        A[0] = 0;
    }
    if (cs &gt; 1) {
        for (i=0; i&lt;=cs-2; i++){
            A[i] = A[i+1];
        }
        A[cs-1] = 0;
    }
    cs--;
    if (cs &lt; 0){
        cs = 0;
    }
}
</declaration>
  <template>
    <name>p1name</name>
    <declaration>clock t;</declaration>
    <location id="id0">
      <name>initp1</name>
      <label kind="invariant">t &lt;= r1</label>
    </location>
    <init ref="id0" />
    <transition>
      <source ref="id0" />
      <target ref="id0" />
      <label kind="guard">t == r1</label>
      <label kind="synchronisation">p1!</label>
      <label kind="assignment">t=0</label>
    </transition>
  </template>
  <template>
    <name>p2name</name>
    <declaration>clock t;</declaration>
    <location id="id1">
      <name>initp2</name>
      <label kind="invariant">t &lt;= r2</label>
    </location>
    <init ref="id1" />
    <transition>
      <source ref="id1" />
      <target ref="id1" />
      <label kind="guard">t == r2</label>
      <label kind="synchronisation">p2!</label>
      <label kind="assignment">t=0</label>
    </transition>
  </template>
  <template>
    <name>p3name</name>
    <declaration>clock t;</declaration>
    <location id="id2">
      <name>initp3</name>
    </location>
    <location id="id3">
      <name>received</name>
      <label kind="invariant">t &lt;= 0</label>
    </location>
    <init ref="id2" />
    <transition>
      <source ref="id2" />
      <target ref="id3" />
      <label kind="synchronisation">s1?</label>
      <label kind="assignment">t=0</label>
    </transition>
    <transition>
      <source ref="id3" />
      <target ref="id2" />
      <label kind="synchronisation">p3!</label>
    </transition>
  </template>
  <template>
    <name>s1name</name>
    <declaration>clock t;</declaration>
    <location id="id4">
      <name>inits1</name>
      <label kind="invariant">t &lt;= ds1</label>
    </location>
    <init ref="id4" />
    <transition>
      <source ref="id4" />
      <target ref="id4" />
      <label kind="guard">t == ds1</label>
      <label kind="synchronisation">s1!</label>
      <label kind="assignment">t=0, dequeue(As1,ns1,cs1)</label>
    </transition>
  </template>
  <template>
    <name>s2name</name>
    <declaration>clock t;</declaration>
    <location id="id5">
      <name>inits2</name>
      <label kind="invariant">t &lt;= ds2</label>
    </location>
    <init ref="id5" />
    <transition>
      <source ref="id5" />
      <target ref="id5" />
      <label kind="guard">t == ds2</label>
      <label kind="assignment">t=0, dequeue(As2,ns2,cs2)</label>
    </transition>
  </template>
  <template>
    <name>top1name</name>
    <location id="id6">
      <name>inittop1</name>
    </location>
    <init ref="id6" />
    <transition>
      <source ref="id6" />
      <target ref="id6" />
      <label kind="synchronisation">p1?</label>
      <label kind="assignment">enqueue(As1,ns1,cs1,os1,1)</label>
    </transition>
    <transition>
      <source ref="id6" />
      <target ref="id6" />
      <label kind="synchronisation">p2?</label>
      <label kind="assignment">enqueue(As1,ns1,cs1,os1,2)</label>
    </transition>
  </template>
  <template>
    <name>top2name</name>
    <location id="id7">
      <name>inittop2</name>
    </location>
    <init ref="id7" />
    <transition>
      <source ref="id7" />
      <target ref="id7" />
      <label kind="synchronisation">p3?</label>
      <label kind="assignment">enqueue(As2,ns2,cs2,os2,3)</label>
    </transition>
  </template>
  <system>
Processp3 = p3name();
Processp1 = p1name();
Processp2 = p2name();
Processs2 = s2name();
Processs1 = s1name();
Processtop1 = top1name();
Processtop2 = top2name();
system Processp3, Processp1, Processp2, Processs2, Processs1, Processtop1, Processtop2;
</system>
</nta>